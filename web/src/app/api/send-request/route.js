import { NextResponse } from "next/server";

// –í—Ä–µ–º–µ–Ω–Ω–æ —Ö–∞—Ä–¥–∫–æ–¥–∏–º —Ç–æ–∫–µ–Ω—ã, –ø–æ—Ç–æ–º –ø–µ—Ä–µ–Ω–µ—Å–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = "7319307835:AAGvCPNsUCa0eMLc__0WsK83gCS0las2Ad4";
const CHAT_ID = "7892393746";

export async function POST(req) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã
    if (!BOT_TOKEN || !CHAT_ID) {
      console.error("Missing bot credentials");
      return NextResponse.json(
        { error: "Configuration error" },
        { status: 500 }
      );
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    const formData = await req.json();
    const { name, email, telegram, service, budget, message } = formData;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name || !email || !service || !message) {
      return NextResponse.json(
        { error: "Missing required fields" },
        { status: 400 }
      );
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const text =
      `üöÄ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!*\n\n` +
      `üë§ *–ò–º—è:* ${name}\n` +
      `üìß *Email:* ${email}\n` +
      `${telegram ? `üì± *Telegram:* ${telegram}\n` : ""}` +
      `üõ† *–£—Å–ª—É–≥–∞:* ${service}\n` +
      `üí∞ *–ë—é–¥–∂–µ—Ç:* ${budget || "–ù–µ —É–∫–∞–∑–∞–Ω"}\n\n` +
      `üìù *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n${message}`;

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
      const response = await fetch(
        `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            chat_id: CHAT_ID,
            text: text,
            parse_mode: "Markdown",
          }),
        }
      );

      const result = await response.json();

      if (!response.ok) {
        console.error("Telegram API error:", result);
        throw new Error(
          result.description || "Failed to send message to Telegram"
        );
      }

      return NextResponse.json({ success: true });
    } catch (telegramError) {
      console.error("Telegram sending error:", telegramError);
      return NextResponse.json(
        { error: "Failed to send message to Telegram" },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error("General error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}
